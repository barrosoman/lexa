Unrecognized character: # at line 1
<id, include>
<l_op, <>
<id, stdio>
Unrecognized character: . at line 1
<id, h>
<l_op, >>
Unrecognized character: # at line 2
<id, include>
<l_op, <>
<id, stdlib>
Unrecognized character: . at line 2
<id, h>
<l_op, >>
Unrecognized character: # at line 3
<id, include>
<l_op, <>
<id, string>
Unrecognized character: . at line 3
<id, h>
<l_op, >>
<id, int>
<id, getn>
<parenthesis, (>
<id, const>
<id, char>
<id, c>
<parenthesis, )>
<semicolon, ;>
<id, int>
<id, my_atoi>
<parenthesis, (>
<id, const>
<id, char>
<pointer, *message>
<parenthesis, )>
<semicolon, ;>
<id, int>
<id, main>
<parenthesis, (>
<id, void>
<parenthesis, )>
<bracket, {>
<id, char>
<id, nstr>
<bracket, [>
<number, 256>
<bracket, ]>
<semicolon, ;>
<id, int>
<id, v>
<semicolon, ;>
<id, printf>
<parenthesis, (>
<string, "Insira um nÃºmero: ">
<parenthesis, )>
<semicolon, ;>
<id, scanf>
<parenthesis, (>
<string, "%s">
<comma, ,>
<id, nstr>
<parenthesis, )>
<semicolon, ;>
<id, v>
<l_op, =>
<id, my_atoi>
<parenthesis, (>
<id, nstr>
<parenthesis, )>
<semicolon, ;>
<id, printf>
<parenthesis, (>
<string, "String: %s.\n">
<comma, ,>
<id, nstr>
<parenthesis, )>
<semicolon, ;>
<id, printf>
<parenthesis, (>
<string, "Valor: %d.\n">
<comma, ,>
<id, v>
<parenthesis, )>
<semicolon, ;>
<id, printf>
<parenthesis, (>
<string, "Valor add 5: %d.\n">
<comma, ,>
<id, v>
<a_op, +>
<number, 5>
<parenthesis, )>
<semicolon, ;>
<bracket, }>
<id, int>
<id, my_atoi>
<parenthesis, (>
<id, const>
<id, char>
<pointer, *message>
<parenthesis, )>
<bracket, {>
<id, register>
<id, int>
<id, t>
<semicolon, ;>
<id, const>
<id, size_t>
<id, len>
<l_op, =>
<id, strlen>
<parenthesis, (>
<id, message>
<parenthesis, )>
<semicolon, ;>
<id, int>
<id, value>
<semicolon, ;>
<id, int>
<id, d>
<semicolon, ;>
<id, value>
<l_op, =>
<number, 0>
<semicolon, ;>
<id, d>
<l_op, =>
<number, 1>
<semicolon, ;>
<id, for>
<parenthesis, (>
<id, t>
<l_op, =>
<id, len>
<a_op, ->
<number, 1>
<semicolon, ;>
<id, t>
<l_op, >=>
<number, 0>
<semicolon, ;>
<id, t>
<a_op, -->
<parenthesis, )>
<bracket, {>
<id, value>
<assign_op, +=>
<id, getn>
<parenthesis, (>
<id, message>
<bracket, [>
<id, t>
<bracket, ]>
<parenthesis, )>
<a_op, *>
<id, d>
<semicolon, ;>
<id, d>
<assign_op, *=>
<number, 10>
<semicolon, ;>
<bracket, }>
<id, return>
<id, value>
<semicolon, ;>
<bracket, }>
<id, int>
<id, getn>
<parenthesis, (>
<id, const>
<id, char>
<id, c>
<parenthesis, )>
<bracket, {>
<id, switch>
<parenthesis, (>
<id, c>
<parenthesis, )>
<bracket, {>
<id, case>
<id, '0'>
<colon, :>
<id, return>
<number, 0>
<semicolon, ;>
<id, case>
<id, '1'>
<colon, :>
<id, return>
<number, 1>
<semicolon, ;>
<id, case>
<id, '2'>
<colon, :>
<id, return>
<number, 2>
<semicolon, ;>
<id, case>
<id, '3'>
<colon, :>
<id, return>
<number, 3>
<semicolon, ;>
<id, case>
<id, '4'>
<colon, :>
<id, return>
<number, 4>
<semicolon, ;>
<id, case>
<id, '5'>
<colon, :>
<id, return>
<number, 5>
<semicolon, ;>
<id, case>
<id, '6'>
<colon, :>
<id, return>
<number, 6>
<semicolon, ;>
<id, case>
<id, '7'>
<colon, :>
<id, return>
<number, 7>
<semicolon, ;>
<id, case>
<id, '8'>
<colon, :>
<id, return>
<number, 8>
<semicolon, ;>
<id, case>
<id, '9'>
<colon, :>
<id, return>
<number, 9>
<semicolon, ;>
<bracket, }>
<id, printf>
<parenthesis, (>
<string, "Unreachable.\n">
<parenthesis, )>
<semicolon, ;>
<id, exit>
<parenthesis, (>
<id, EXIT_FAILURE>
<parenthesis, )>
<semicolon, ;>
<bracket, }>
DEBUG: Line_count = 62
