#
# Arquivo de Entrada Principal
#
# Este arquivo tem o objetivo de mostrar as principais
# sintaxes ofericidas por esta linguagem, sendo demonstrado.
#
#   - Declaração de Variáveis
#   - Declaração com Atribuição de Variáveis
#   - Atribuição de Variáveis
#   - Comandos condicionais
#   - Laços de repetição (for-loop, while-loop & do-until-loop)
#   - Definição de Procedimentos
#   - Chamadas de procedimentos
#

let a: int = read("Insira um número inteiro não-negativo: ");

if a < 0 then
  write("Número negativo foi inserido. O programa será fechado.");
  exit();
end if

let s: double = sum(a);

write("A soma dos primeiros {} números é {}", a, s);

#
# sum
#  
#  Esta função é responsável por retornar
#  o valor representando a soma dos
#  primeiros 'n' números naturais.
#
procedure sum(n: int): int
  let sum: int = 0;
  let i: int = 1;

  while i <= n do
    sum += i;
    i++;
  end while

  return sum;
end procedure

#
# iterative_factorial
#
#   Esta função é responsável por retornar
#   o fatorial de 'n', isto é, n!.
#
procedure iterative_factorial(n: int): int
  let fact: int = 1;
  let i: int = 1;

  while i <= n do
    fact *= i;
    i++;
  end while
  
  return fact;
end procedure

#
# recursive_factorial
#
#   Esta função é responsável por retornar
#   o fatorial de 'n', isto é, n!.
#
procedure recursive_factorial(n: int): int
  if n == 1 then
    return 1;
  end if

  return n * recursive_factorial(n - 1);
end procedure

#
# avg
#   
#   Esta função é responsável por realizar
#   o cálculo da média dos valores presentes
#   em um vetor de inteiros de tamanho `arraylen`.
#
procedure avg(array: int[], arraylen: int): int
  let sum: double = 0;
  let i: int = 0;

  while i < arraylen do
    sum += array[i];
  end while

  return sum / arraylen;
end procedure

#
# abs
#   
#   Esta função é responsável por retornar
#   o módulo de um número real x, isto é, |x|.
#
procedure abs(x: double): double
  return x >= 0.0 ? x : -x;
end procedure

#
# sqrt
#
#   Esta função é responsável por calcular
#   a raiz quadrada de um número real x,
#   utilizando o método de Netwon-Raphson.
#
procedure sqrt(x: double): double
  let xi: double = x;
  let xii: double;
  let error: double;

  do
    xii = 0.5 * (xi + x / xi);
    error = abs(xii - xi);
    xi = xii;
  until error <= 1e-6;

  return xii;
end procedure
